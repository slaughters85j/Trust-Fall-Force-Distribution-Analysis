# This workflow will install Python dependencies and run basic validation checks
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Trust Fall Analysis Application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Validate imports and basic functionality
      run: |
        # Test that the main analysis module can be imported and basic functions work
        python -c "
        import trust_fall_analysis
        from trust_fall_analysis import TrustFallSimulation
        
        # Test basic simulation creation
        sim = TrustFallSimulation(
            person_mass=113.4,  # kg
            person_height=2.0,  # m
            fall_distance=0.281,  # m
            catch_height=1.219,  # m
        )
        
        print(f'✓ Simulation created successfully')
        print(f'✓ Impact velocity: {sim.impact_velocity:.2f} m/s')
        print(f'✓ Impact energy: {sim.calculate_impact_energy():.0f} J')
        
        # Test finding minimum catchers
        min_catchers, results = sim.find_minimum_catchers(max_force_per_catcher=400, deceleration_distance=0.3)
        print(f'✓ Minimum catchers calculation: {min_catchers} catchers needed')
        "
    
    - name: Test GUI module import (headless)
      run: |
        # Test that GUI module can be imported (but not run due to no display)
        export QT_QPA_PLATFORM=offscreen
        python -c "
        try:
            from trust_fall_gui import TrustFallGUI
            print('✓ GUI module imports successfully')
        except ImportError as e:
            print(f'✗ GUI import failed: {e}')
            exit(1)
        "
    
    - name: Generate sample visualization
      run: |
        # Generate a sample visualization to ensure matplotlib backend works
        export MPLBACKEND=Agg
        python -c "
        import matplotlib
        matplotlib.use('Agg')
        from trust_fall_analysis import TrustFallSimulation, visualize_results
        
        # Create simulation
        sim = TrustFallSimulation(
            person_mass=113.4,
            person_height=2.0,
            fall_distance=0.281,
            catch_height=1.219,
        )
        
        # Find optimal configuration
        optimal_catchers, optimal_results = sim.find_minimum_catchers(
            max_force_per_catcher=400,
            deceleration_distance=0.3
        )
        
        # Optimize positions
        optimized_positions = sim.optimize_catcher_positions(optimal_catchers, 0.3)
        optimized_results = sim.simulate_catch(optimal_catchers, 0.3, optimized_positions)
        
        # Test both metric and imperial visualizations
        fig_metric = visualize_results(sim, optimized_results, use_metric=True)
        fig_imperial = visualize_results(sim, optimized_results, use_metric=False)
        
        print('✓ Metric visualization generated successfully')
        print('✓ Imperial visualization generated successfully')
        "

  # Optional: Create a job that runs the command-line version
  command-line-demo:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run command-line analysis demo
      run: |
        export MPLBACKEND=Agg
        python trust_fall_analysis.py > analysis_output.txt
        echo "✓ Command-line analysis completed"
        echo "--- Analysis Output Summary ---"
        grep -E "(TRUST FALL|Impact velocity|Minimum catchers|Peak segment force)" analysis_output.txt || true
    
    - name: Upload analysis output
      uses: actions/upload-artifact@v3
      with:
        name: analysis-output
        path: |
          analysis_output.txt
          trust_fall_analysis.png
        retention-days: 7
